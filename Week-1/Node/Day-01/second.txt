Working through these JavaScript exercises provided a valuable blend of review and new learning. Many of the foundational concepts—such as variable declarations (let, const, var), array methods (map, filter, reduce), and function types—were familiar but revisiting them in a structured way helped deepen my understanding. In particular, contrasting var's function scoping with let and const's block scoping was a good reminder of common pitfalls in older JavaScript code.

Some of the newer ES6+ features like optional chaining (?.) and nullish coalescing (??) were relatively new to me. I had seen them in documentation but hadn’t used them much. After trying them in real examples, I now see their value in making code more readable and avoiding unnecessary if checks. Similarly, using the spread operator in both object and array contexts felt much more intuitive after practice.

One of the most challenging parts was understanding this binding in the context of arrow functions versus traditional functions. Arrow functions do not have their own this, which can be confusing when working inside object methods. This distinction is especially important when building backend services with Node.js, where understanding scope and context is critical for asynchronous operations and working with classes or callbacks.

These concepts are directly applicable to Node.js development. For instance, destructuring and default parameters make APIs cleaner and more resilient. Higher-order functions and closures are frequently used in middleware and asynchronous flows. Understanding how this works is crucial when dealing with event emitters, class-based modules, or binding context in callbacks.

Moving forward, I’d like to explore JavaScript modules (import/export), asynchronous patterns (promises, async/await), and error handling in more depth. These are essential for writing scalable, maintainable backend code. I'm also curious about how TypeScript builds on these foundations to introduce strong typing and how it integrates into a Node.js environment.

Overall, this exercise helped me reinforce key skills and build confidence in using modern JavaScript features efficiently and thoughtfully.

